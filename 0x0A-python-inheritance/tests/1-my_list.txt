# This is the module to test the `1-my_list.py`

The module supplies one function, 'print_sorted()'

'print_sorted()' => prints a list of int sorted in ascending order.

Importing the Function:
	>>> MyList = __import__('1-my_list').MyList

Test if MyList is instance of list or if MyList is sub class of list:
	>>> my_list = MyList()
	>>> isinstance(my_list, list)
	True

	>>> my_list = MyList()
	>>> issubclass(MyList, list)
	True

Test if `print_sorted` is method of class MyList:
	>>> my_list = MyList()
	>>> 'print_sorted' in dir(MyList)
	True

Test With Providing Example (list of positive Integers):
	>>> my_list = MyList()
	>>> my_list.append(1)
	>>> my_list.append(4)
	>>> my_list.append(2)
	>>> my_list.append(3)
	>>> my_list.append(5)
	>>> my_list.print_sorted()
	[1, 2, 3, 4, 5]

Test with a list of negative integers:
	>>> my_list = MyList()
	>>> my_list.append(-1)
	>>> my_list.append(-4)
	>>> my_list.append(-2)
	>>> my_list.append(-3)
	>>> my_list.append(-5)
	>>> my_list.print_sorted()
	[-5, -4, -3, -2, -1]

Test With positive and negative integers:
	>>> my_list = MyList()
	>>> my_list.append(-1)
	>>> my_list.append(1)
	>>> my_list.append(-4)
	>>> my_list.append(4)
	>>> my_list.append(-2)
	>>> my_list.print_sorted()
	[-4, -2, -1, 1, 4]

Test with integers as strings:
	>>> my_list = MyList()
	>>> my_list.append("1")
	>>> my_list.append("4")
	>>> my_list.append("2")
	>>> my_list.append("3")
	>>> my_list.append("5")
	>>> my_list.print_sorted()
	['1', '2', '3', '4', '5']

Test an empty list:
	>>> my_list = MyList()
	>>> my_list.print_sorted()
	[]

Test if print_sorted() returns a new list:
	>>> my_list = MyList()
	>>> my_list.append(1)
	>>> my_list.append(4)
	>>> my_list.append(2)
	>>> my_list.append(3)
	>>> my_list.append(5)
	>>> my_list.print_sorted()
	[1, 2, 3, 4, 5]
	>>> my_list
	[1, 4, 2, 3, 5]

Test giving more than one argument to print_sorted():
	>>> my_list = MyList()
	>>> my_list.print_sorted([4, 5])
	Traceback (most recent call last):
		...
	TypeError: print_sorted() takes 1 positional argument but 2 were given
